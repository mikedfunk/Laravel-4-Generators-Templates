<?php
/**
 * @package MyPackage
 * @copyright 2014 Internet Brands, Inc. All Rights Reserved.
 */
namespace My\Namespace\Here;

use Mockery as m;
use Way\Tests\Factory;

/**
 * {{className}}
 *
 * @author Michael Funk <mfunk@internetbrands.com>
 */
class {{className}} extends TestCase 
{

    /**
     * Dependency injection
     *
     * @return void
     */
    public function __construct()
    {
        $this->mock = m::mock('Eloquent', '{{Model}}');
        $this->collection = m::mock('Illuminate\Database\Eloquent\Collection')->shouldDeferMissing();
    }

    /**
     * PHPUnit constructor
     *
     * @return void
     */
    public function setUp()
    {
        parent::setUp();

        $this->attributes = Factory::{{model}}(['id' => 1]);
        $this->app->instance('{{Model}}', $this->mock);
    }

    /**
     * PHPUnit destructor
     *
     * @return void
     */
    public function tearDown()
    {
        m::close();
    }

    /**
     * test the index method
     *
     * @return void
     */
    public function testIndex()
    {
        $this->mock->shouldReceive('all')->once()->andReturn($this->collection);
        $this->call('GET', '{{models}}');

        $this->assertViewHas('{{models}}');
    }

    /**
     * test the create method
     *
     * @return void
     */
    public function testCreate()
    {
        $this->call('GET', '{{models}}/create');

        $this->assertResponseOk();
    }

    /**
     * test the store method
     *
     * @return void
     */
    public function testStore()
    {
        $this->mock->shouldReceive('create')->once();
        $this->validate(true);
        $this->call('POST', '{{models}}');

        $this->assertRedirectedToRoute('{{models}}.index');
    }

    /**
     * test the store method, ensure validation fails
     *
     * @return void
     */
    public function testStoreFails()
    {
        $this->mock->shouldReceive('create')->once();
        $this->validate(false);
        $this->call('POST', '{{models}}');

        $this->assertRedirectedToRoute('{{models}}.create');
        $this->assertSessionHasErrors();
        $this->assertSessionHas('message');
    }

    /**
     * test the show method
     *
     * @return void
     */
    public function testShow()
    {
        $this->mock->shouldReceive('findOrFail')
                   ->with(1)
                   ->once()
                   ->andReturn($this->attributes);

        $this->call('GET', '{{models}}/1');

        $this->assertViewHas('{{model}}');
    }

    /**
     * test the edit method
     *
     * @return void
     */
    public function testEdit()
    {
        $this->collection->id = 1;
        $this->mock->shouldReceive('find')
                   ->with(1)
                   ->once()
                   ->andReturn($this->collection);

        $this->call('GET', '{{models}}/1/edit');

        $this->assertViewHas('{{model}}');
    }

    /**
     * test the update method
     *
     * @return void
     */
    public function testUpdate()
    {
        $this->mock->shouldReceive('find')
                   ->with(1)
                   ->andReturn(m::mock(['update' => true]));

        $this->validate(true);
        $this->call('PATCH', '{{models}}/1');

        $this->assertRedirectedTo('{{models}}/1');
    }

    /**
     * test the update method, ensure it fails validation
     *
     * @return void
     */
    public function testUpdateFails()
    {
        $this->mock->shouldReceive('find')->with(1)->andReturn(m::mock(['update' => true]));
        $this->validate(false);
        $this->call('PATCH', '{{models}}/1');

        $this->assertRedirectedTo('{{models}}/1/edit');
        $this->assertSessionHasErrors();
        $this->assertSessionHas('message');
    }

    /**
     * test the destroy method
     *
     * @return void
     */
    public function testDestroy()
    {
        $this->mock->shouldReceive('find')->with(1)->andReturn(m::mock(['delete' => true]));

        $this->call('DELETE', '{{models}}/1');
    }

    /**
     * test the validate method
     *
     * @return void
     */
    protected function validate($bool)
    {
        Validator::shouldReceive('make')
                ->once()
                ->andReturn(m::mock(['passes' => $bool]));
    }
}
